{"version":3,"file":"bundle.js","sources":["../src/HelperFunctions.ts","../src/ThemeContext.ts","../src/ThemeFactory.ts","../src/lapg.ts"],"sourcesContent":["// Ficticio: Asegúrate de importar esto desde donde realmente se defina.\r\nimport { ThemeContext } from './ThemeContext';\r\n\r\ninterface Style {\r\n  [key: string]: string | Style;\r\n}\r\n\r\ninterface Variables {\r\n  [key: string]: string;\r\n}\r\n\r\nexport function generateCSSRules(themeName: string, theme: Style, variables: Variables): string {\r\n  const processStyles = (selector: string, styles: Style): string => {\r\n    const styleRules: string[] = [];\r\n    const nestedRules: string[] = [];\r\n\r\n    for (const [property, value] of Object.entries(styles)) {\r\n      if (typeof value === 'object' && !Array.isArray(value)) {\r\n        const nestedSelector = property.startsWith('&') ? property.slice(1) : ` ${property}`;\r\n        nestedRules.push(processStyles(`${selector}${nestedSelector}`, value as Style));\r\n      } else {\r\n        const kebabProperty = camelCaseToKebabCase(property);\r\n        const replacedValue = replaceVariables(value as string, variables);\r\n        styleRules.push(`${kebabProperty}: ${replacedValue};`);\r\n      }\r\n    }\r\n\r\n    const currentRule = `${selector} {${styleRules.join(\" \")}}`;\r\n    return [currentRule, ...nestedRules].join(\"\\n\");\r\n  };\r\n\r\n  let css = '';\r\n  for (const [selector, styles] of Object.entries(theme)) {\r\n    let prefixedSelector;\r\n\r\n    if (selector === 'body') {\r\n      prefixedSelector = `body[data-dynamic-style]`;\r\n    } else if (selector.startsWith('.') || selector.startsWith('#') || /^[a-zA-Z0-9]+$/.test(selector)) {\r\n      prefixedSelector = `body[data-dynamic-style] ${selector}`;\r\n    } else {\r\n      prefixedSelector = `body[data-dynamic-style] .${themeName}-${selector}`;\r\n    }\r\n\r\n    css += processStyles(prefixedSelector, styles);\r\n  }\r\n\r\n  return css;\r\n}\r\n\r\n// export function applyStyles(): void {\r\n//   const themeContextInstance = ThemeContext.getInstance();\r\n//   const elements = document.querySelectorAll('[data-dynamic-style]');\r\n\r\n//   elements.forEach((element: Element) => {\r\n//     const themeName = element.getAttribute('data-theme') || themeContextInstance.currentTheme;\r\n//     const css = generateCSSRules(themeName, themeContextInstance.themes[themeName], themeContextInstance.variables);\r\n//     if (!element.hasOwnProperty('_styleElement')) {\r\n//       (element as any)._styleElement = document.createElement('style');\r\n//       (element as any)._styleElement.setAttribute('data-lazy', 'true');\r\n//       document.head.appendChild((element as any)._styleElement);\r\n//     }\r\n//     (element as any)._styleElement.textContent = css;\r\n//   });\r\n// }\r\nexport function applyGlobalStyles(): void {\r\n  const themeContextInstance = ThemeContext.getInstance();\r\n  const themeName = themeContextInstance.currentTheme;\r\n  const css = generateCSSRules(themeName, themeContextInstance.themes[themeName], themeContextInstance.variables);\r\n\r\n  if (!themeContextInstance.styleElement) {\r\n    themeContextInstance.styleElement = document.createElement(\"style\");\r\n    themeContextInstance.styleElement.setAttribute(\"data-lazy\", \"true\");\r\n    document.head.appendChild(themeContextInstance.styleElement);\r\n  }\r\n\r\n  themeContextInstance.styleElement.textContent = css;\r\n}\r\n\r\nexport function camelCaseToKebabCase(str: string): string {\r\n  return str.replace(/([a-z0-9]|(?=[A-Z]))([A-Z])/g, '$1-$2').toLowerCase();\r\n}\r\n\r\nexport function replaceVariables(value: string, variables: Variables): string {\r\n  return value.replace(/\\$([a-zA-Z0-9]+(-[a-zA-Z0-9]+)?)/g, (_, varName) => variables[varName]);\r\n}\r\n\r\n","import { generateCSSRules, /*applyStyles*/applyGlobalStyles } from './HelperFunctions';  // Asegúrate de importar desde la ubicación correcta\r\n\r\ntype Theme = { [key: string]: any };  // Define tu propia estructura de tema aquí\r\n\r\ninterface IThemeContextInstance {\r\n    themes: { [key: string]: Theme };\r\n    currentTheme: string | null;\r\n    styleElement: HTMLStyleElement | null;\r\n    variables: { [key: string]: string };\r\n    loadTheme: (themeName: string, theme: Theme) => void;\r\n    setTheme: (themeName: string) => void;\r\n    updateTheme: () => void;\r\n    init: (variables: { [key: string]: string }) => void;\r\n}\r\n\r\nexport const ThemeContext = (() => {\r\n    let instance: IThemeContextInstance;\r\n\r\n    function createInstance(): IThemeContextInstance {\r\n        return {\r\n            themes: {} as { [key: string]: Theme },\r\n            currentTheme: null as string | null,\r\n            styleElement: null as HTMLStyleElement | null,\r\n            variables: {} as { [key: string]: string },\r\n            loadTheme: function (themeName: string, theme: Theme) {\r\n                if (!themeName || !theme) {\r\n                    console.error('Invalid arguments.');\r\n                    return;\r\n                }\r\n                this.themes[themeName] = theme;\r\n            },\r\n            setTheme: function (themeName: string) {\r\n                if (!this.themes[themeName]) {\r\n                    console.error(`Theme '${themeName}' not found.`);\r\n                    return;\r\n                }\r\n                this.currentTheme = themeName;\r\n                this.updateTheme();\r\n            },\r\n            updateTheme: function () {\r\n                if (!this.currentTheme) return;\r\n                applyGlobalStyles();\r\n\r\n                // const theme = this.themes[this.currentTheme];\r\n                // const css = generateCSSRules(this.currentTheme, theme, this.variables);\r\n                // if (!this.styleElement) {\r\n                //     this.styleElement = document.createElement('style');\r\n                //     this.styleElement.setAttribute('data-lazy', 'true');\r\n                //     document.head.appendChild(this.styleElement);\r\n                // }\r\n                // this.styleElement.textContent = css;\r\n                // applyStyles();\r\n            },\r\n            init: function (variables: any) {\r\n                this.variables = variables;\r\n            },\r\n        };\r\n    }\r\n\r\n    return {\r\n        getInstance: function () :IThemeContextInstance{\r\n            if (!instance) {\r\n                instance = createInstance();\r\n            }\r\n            return instance;\r\n        },\r\n    };\r\n})();\r\n","export function themeFactory(themeJSON: any): any {\r\n    return themeJSON;\r\n}\r\n","import { ThemeContext } from './ThemeContext'; // Make sure ThemeContext is defined correctly\r\nimport { themeFactory } from './ThemeFactory';\r\n\r\ninterface IThemeContext {\r\n  variables: { [key: string]: string };\r\n  updateTheme: () => void;\r\n  loadTheme: (themeName: string, theme: any) => void;\r\n  init: (variables: { [key: string]: string }) => void;\r\n}\r\n\r\ninterface LapgOptions {\r\n  variables?: { [key: string]: string };\r\n}\r\n\r\ndeclare global {\r\n  interface Window {\r\n    lapg: typeof lapg;\r\n    ThemeContext: typeof ThemeContext;\r\n  }\r\n}\r\n\r\n\r\nconst lapg = (options: LapgOptions) => {\r\n  const themeContextInstance = ThemeContext.getInstance() as IThemeContext; // Cast to the correct type\r\n  themeContextInstance.init(options.variables || {});\r\n\r\n  return {\r\n    ThemeContext: themeContextInstance,\r\n    loadThemeFromJSON: (themeName: string, themeJSON: any) => {\r\n      const theme = themeFactory(themeJSON);\r\n      themeContextInstance.loadTheme(themeName, theme);\r\n    },\r\n    on: (eventName: string, callback: Function) => document.addEventListener(`lapg:${eventName}`, (e: Event) => {\r\n      if ('detail' in e) {\r\n        callback((e as CustomEvent).detail);\r\n      }\r\n    }),\r\n    emit: (eventName: string, data: any) => document.dispatchEvent(new CustomEvent(`lapg:${eventName}`, { detail: data })),\r\n  };\r\n};\r\n\r\n// Attach to global scope\r\n(function (global: Window) {\r\n  global.lapg = lapg;\r\n  global.ThemeContext = ThemeContext;\r\n})(window);\r\n\r\nexport default lapg;\r\n"],"names":[],"mappings":"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"}